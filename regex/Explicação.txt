Regex

CSV
João Fulano,123.456.789-00,21 de Maio de 1993,(21) 3079-9987,Rua do Ouvidor,50,20040-030,Rio de Janeiro
Maria Fulana, 98765432100,11 de Abril de 1995,(11) 933339871,Rua Vergueiro,3185,04101-300,São Paulo
denise teste, 987.654.321.00,28 de Dezembro de 1991,(31)45562712,SCS Qd. 8 Bl. B-50,11,70333-900,Rio Grande




<div .*>
. = qualquer caractere
* = zero ou mais


var objetoRegex = new RegExp(textoPattern, 'g');

A letra g é uma flag do mundo JavaScript e significa global, para aplicar a regex na string inteira (e não parar no primeiro match) .


. o "ponto" que significa qualquer char
* o asterisco que serve para definir uma quantidade de chars, zero ou mais vezes
{e } as chaves que servem para definir uma quantidade de caracteres específicas que é desejado encontrar
Por exemplo:

a{3} letra a 3 vezes.
\d* um digito zero ou mais vezes
Lembrando também, se quisermos procurar pelo * ou . literalmente (sem significado especial), devemos utilizar o caractere \

um número é representado pelo \d

Queremos exatamente 3 números que podemos definir pela expressão \d{3}

CPF
\d{3}\.\d{3}\.\d{3}\-\d{2}

CNPJ
\d{2}\.\d{3}\.\d{3}/\d{4}-\d{2}

IP
\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}

CEP
\d{5}-\d{3}

TELEFONE
\(\d{2}\) \d{4}-\d{4}

RESUMO AULA 1
Existem quantifiers que definem quantas vezes um caractere deve aparecer:
{1} é um quantifier que significa uma vez.
* é um quantifier que significa zero, uma ou mais vezes
. é um meta-char que significa qualquer char.
Com \ podemos escapar meta-chars, por exemplo \.


AULA 2

Classe onde verifica se é ponto ou hifen[.-]

? meta char que verifica se é 0 ou 1 [.-]?

[012345689]
ou
[0-9]

hifen indica de 0 até 9


CPF
\d{3}[.-]?\d{3}[.-]?\d{3}[.-]?\d{2}


No <code>for</code>, o valor de <code>i</code> começa de zero e é incrementado a cada volta enquanto <code>i < 10</code>, portando o bloco de código do for é executado 10 vezes.

</?code>


? - zero ou uma vez.
* - zero ou mais vezes.
+ - uma ou mais vezes.
{n} - exatamente n vezes.
{n,} - no mínimo n vezes.
{n,m} - no mínimo n vezes, no máximo m vezes

[A-Z] significa de A até Z, sempre maiúscula.
[a-z] significa de a até z, sempre minúscula,
[A-Za-z] significa A-Z ou a-z.
[abc] significa a, b ou c.

[A-Z][a-zç]


pegar data
21 de Setembro de 1993
[0123]?\d\s+de\s+[A-Z][a-zç]{3,8}\s+de\s+[12]\d{3}

pegar hora
19h32min16s
\d{2}h\d{2}min\d{2}s

placa de carro
[A-Z]{3}-\d{4}

Podemos definir facilmente a classe de qualquer caractere com o [A-Z].

Conhecemos todos os quantifiers como ?, +, * e {n}.

\s significa whitespace e é um atalho para [ \t\r\n\f].

\w significa word char e é uma atalho para [A-Za-z0-9_].


O que queremos na verdade é encontrar o início e o fim de uma palavra, que podemos definir pela regex \b. \b é uma das âncoras, chamada de word boundary. Uma âncora não seleciona um caractere, e sim apenas uma posição no texto alvo. Ou seja, a âncora \b sozinha devolve nada (zero-length) mas combinada com um valor literal, ou outra regex, podemos finalmente definir como encontrar a preposição de:

\bde\b

denise teste, 987.654.321-00,28 de Dezembro de 1991,(31)45562712,SCS Qd. 8 Bl. B-50,11,70333-900,Rio Grande

Uma âncora não casa caracteres como as classes fazem, e nem definem quantidades. Âncoras marcam uma posição específica no alvo, por isso não é possível combiná-las com um quantifier.


^ - pega o valor inicial
.+ - pega tudo no meio

html$ - pega o final
\.html - pega o final

^file.+\.html
^file.+html$
file:///Users/nico/Downloads/regex/index.html


CPF - Apenas o cpf (se houver frase antes ou depois não vai pegar)
^\d{3}\.\d{3}\.\d{3}-\d{2}$


Pegando Erro
^Caused by:.*
^Caused by:.+
Caused by: com.mysql.jdbc.exceptions.jdbc4.CommunicationsException: Communications link failure


Pega data com 1 ou sem espaço
^Data:[\s]?[0-9]{2}\/[0-9]{2}\/[0-9]{4}$

Data: 02/09/1964 
Data:02/09/1964


Pega tudo que no final for html
.*\.html$


Existem âncoras predefinidas que selecionam uma posição dentro do alvo.
\b é uma âncora que seleciona um word boundary, isso é o início ou fim da palavra.
^ é uma âncora que seleciona o início da string alvo.
$ é uma âncora que seleciona o fim do alvo.



Recuperar data
[0123]?\d\s+de\s+[A-Z][a-zç]{1,8}\s+de\s+[12]\d{3}
João Fulano,123.456.789-00,21 de Maio de 1993,(21) 3079-9987,Rua do Ouvidor,50,20040-030,Rio de Janeiro

resultado - 21 de Maio de 1993

grupo

Ao executar, a regex devolve a data completa, como planejamos. Agora imagine que queremos sim fazer um match da data, mas selecionar apenas o ano. Para tal existem os grupos. Um grupo é definido através de parênteses (). Ou seja, basta colocar a parte da regex que define o ano em parênteses:

Recuperando data

[0123]?\d\s+de\s+[A-Z][a-zç]{1,8}\s+de\s+([12]\d{3})

resultado - 1993

([0123]?\d)\s+de\s+([A-Z][a-zç]{1,8})\s+de\s+([12]\d{3})

resultado - 21 - maio - 1993

. Agora, a pergunta é: como podemos usar um grupo que não é devolvido pela regex? Para tal existem os non-capturing groups!
Novamente usaremos o simbolo ?, mas agora no início do grupo junto com os dois pontos, por exemplo para a preposição de: (?:de\s+)

(?:[0123]?\d)\s+de\s+([A-Z][a-zç]{1,8})\s+de\s+([12]\d{3})

resultado - maio - 1993


Decifrar
Z\d+(\w)
Z171PZ7AZ23PZ7819AZ78GZ1AZ99IZ34O


Quebrando em 2 grupos
Caused by: com.mysql.jdbc.exceptions.jdbc4.CommunicationsException: Communications link failure
(Caused[\s\w:.-]+):([\w\s]+)


recuperar email alura ou caelum

([a-z.]{4,14}[a-z\d])@(?:caelum.com.br|alura.com.br)


Resultado entre o h1

<h1.+?>([\w\sõãí.]+)</h1>
<h1 class="text-left">Expressões regulares</h1>


backreferences
O que queremos, quando a tag for uma h1, no final também deve estar uma h1, igualmente para a tag h2. Essa dependência podemos definir através de back-references, uma referência para um texto já encontrado. A sintaxe é simples, usa-se um \ seguido pelo número do grupo, começando com 1.

<h1 id="regex" class="form">Expressões regulares não são tão difíceis.</h1>
<(h1|h2).+?>([\w\sõãí.]+)<\/\1>



Ancoras
\b - word boundary
^ - inicio do alvo
$ - fim do alvo


Quantifier

{n,m} - no minimo n, no maximo m
? - zero ou uma vez
+ - uma ou mais vezes
* - zero ou mais vezes

Classes de char

[A-Z] - letras de A até Z
[123] - 1,2 ou 3
\d - todos os digitos [0,9]
\s - whitespaces [\t\r\n\f]
\w - wordchar [A - Za - z0 - 9_ ]

Grupos

(\w+) - grupo de word chars
(\w+)? - grupo opcional
(:?\w+) - non-capturing grup

